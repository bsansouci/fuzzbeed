{
  "method": {
    "name": "flickr.places.placesForTags",
    "needslogin": 0,
    "needssigning": 0,
    "requiredperms": 0,
    "description": {
      "_content": "Return a list of the top 100 unique places clustered by a given placetype for set of tags or machine tags. "
    },
    "response": {
      "_content": "<places total=\"1\">\r\n   <place place_id=\"kH8dLOubBZRvX_YZ\" woeid=\"2487956\"\r\n               latitude=\"37.779\" longitude=\"-122.420\"\r\n               place_url=\"/United+States/California/San+Francisco\"\r\n               place_type=\"locality\"\r\n               photo_count=\"156\">San Francisco, California</place>\r\n</places>"
    }
  },
  "arguments": {
    "argument": [
      {
        "name": "api_key",
        "optional": 0,
        "_content": "Your API application key. <a href=\"/services/api/misc.api_keys.html\">See here</a> for more details."
      },
      {
        "name": "place_type_id",
        "optional": "0",
        "_content": "The numeric ID for a specific place type to cluster photos by. <br /><br />\r\n\r\nValid place type IDs are :\r\n\r\n<ul>\r\n<li><strong>22</strong>: neighbourhood</li>\r\n<li><strong>7</strong>: locality</li>\r\n<li><strong>8</strong>: region</li>\r\n<li><strong>12</strong>: country</li>\r\n<li><strong>29</strong>: continent</li>\r\n</ul>"
      },
      {
        "name": "woe_id",
        "optional": "1",
        "_content": "A Where on Earth identifier to use to filter photo clusters. For example all the photos clustered by <strong>locality</strong> in the United States (WOE ID <strong>23424977</strong>).\r\n<br /><br />\r\n<span style=\"font-style:italic;\">(While optional, you must pass either a valid Places ID or a WOE ID.)</span>"
      },
      {
        "name": "place_id",
        "optional": "1",
        "_content": "A Flickr Places identifier to use to filter photo clusters. For example all the photos clustered by <strong>locality</strong> in the United States (Place ID <strong>4KO02SibApitvSBieQ</strong>).\r\n<br /><br />\r\n<span style=\"font-style:italic;\">(While optional, you must pass either a valid Places ID or a WOE ID.)</span>"
      },
      {
        "name": "threshold",
        "optional": "1",
        "_content": "The minimum number of photos that a place type must have to be included. If the number of photos is lowered then the parent place type for that place will be used.<br /><br />\r\n\r\nFor example if you only have <strong>3</strong> photos taken in the locality of Montreal</strong> (WOE ID 3534) but your threshold is set to <strong>5</strong> then those photos will be \"rolled up\" and included instead with a place record for the region of Quebec (WOE ID 2344924)."
      },
      {
        "name": "tags",
        "optional": "1",
        "_content": "A comma-delimited list of tags. Photos with one or more of the tags listed will be returned."
      },
      {
        "name": "tag_mode",
        "optional": "1",
        "_content": "Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified."
      },
      {
        "name": "machine_tags",
        "optional": "1",
        "_content": "Aside from passing in a fully formed machine tag, there is a special syntax for searching on specific properties :\r\n\r\n<ul>\r\n  <li>Find photos using the 'dc' namespace :    <code>\"machine_tags\" => \"dc:\"</code></li>\r\n\r\n  <li> Find photos with a title in the 'dc' namespace : <code>\"machine_tags\" => \"dc:title=\"</code></li>\r\n\r\n  <li>Find photos titled \"mr. camera\" in the 'dc' namespace : <code>\"machine_tags\" => \"dc:title=\\\"mr. camera\\\"</code></li>\r\n\r\n  <li>Find photos whose value is \"mr. camera\" : <code>\"machine_tags\" => \"*:*=\\\"mr. camera\\\"\"</code></li>\r\n\r\n  <li>Find photos that have a title, in any namespace : <code>\"machine_tags\" => \"*:title=\"</code></li>\r\n\r\n  <li>Find photos that have a title, in any namespace, whose value is \"mr. camera\" : <code>\"machine_tags\" => \"*:title=\\\"mr. camera\\\"\"</code></li>\r\n\r\n  <li>Find photos, in the 'dc' namespace whose value is \"mr. camera\" : <code>\"machine_tags\" => \"dc:*=\\\"mr. camera\\\"\"</code></li>\r\n\r\n </ul>\r\n\r\nMultiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. \"AND\" queries are limited to (16) machine tags. \"OR\" queries are limited\r\nto (8)."
      },
      {
        "name": "machine_tag_mode",
        "optional": "1",
        "_content": "Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified."
      },
      {
        "name": "min_upload_date",
        "optional": "1",
        "_content": "Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp."
      },
      {
        "name": "max_upload_date",
        "optional": "1",
        "_content": "Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp."
      },
      {
        "name": "min_taken_date",
        "optional": "1",
        "_content": "Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime."
      },
      {
        "name": "max_taken_date",
        "optional": "1",
        "_content": "Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime."
      }
    ]
  },
  "errors": {
    "error": [
      {
        "code": 100,
        "message": "Invalid API Key",
        "_content": "The API key passed was not valid or has expired."
      },
      {
        "code": 105,
        "message": "Service currently unavailable",
        "_content": "The requested service is temporarily unavailable."
      },
      {
        "code": 106,
        "message": "Write operation failed",
        "_content": "The requested operation failed due to a temporary issue."
      },
      {
        "code": 111,
        "message": "Format \"xxx\" not found",
        "_content": "The requested response format was not found."
      },
      {
        "code": 112,
        "message": "Method \"xxx\" not found",
        "_content": "The requested method was not found."
      },
      {
        "code": 114,
        "message": "Invalid SOAP envelope",
        "_content": "The SOAP envelope send in the request could not be parsed."
      },
      {
        "code": 115,
        "message": "Invalid XML-RPC Method Call",
        "_content": "The XML-RPC request document could not be parsed."
      },
      {
        "code": 116,
        "message": "Bad URL found",
        "_content": "One or more arguments contained a URL that has been used for abuse on Flickr."
      }
    ]
  },
  "stat": "ok"
}